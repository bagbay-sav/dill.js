// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = function() {
  var World, _ref, _ref1, _ref2;
  World = this;
  this.Widgets = {};
  this.Widget = (function() {
    function Widget(attributes) {
      if (attributes == null) {
        attributes = {};
      }
      _.extend(this, attributes);
    }

    Widget.prototype.world = World;

    Widget.getter('driver', function() {
      return this._driver || World.driver;
    });

    Widget.prototype.click = function(selector, selector_type) {
      if (selector_type == null) {
        selector_type = "css";
      }
      return this.find(selector, selector_type).click();
    };

    Widget.prototype.hover = function(selector) {
      var selected;
      selected = this.find(selector);
      return new Driver.ActionSequence(this.driver).mouseMove(selected).perform();
    };

    Widget.prototype.fill = function(selector, value) {
      return this.find(selector).sendKeys(value);
    };

    Widget.prototype.read = function(selector) {
      var selected;
      selected = this.find(selector);
      return selected.getAttribute('value').then(function(value) {
        return value || selected.getText();
      });
    };

    Widget.prototype.find = function(selector, selector_type) {
      var _isPresent, _selector,
        _this = this;
      if (selector_type == null) {
        selector_type = "css";
      }
      _selector = (function() {
        switch (selector_type) {
          case "linkText":
            return Driver.By.linkText(selector);
          default:
            return Driver.By.css(this._selector(selector));
        }
      }).call(this);
      _isPresent = function() {
        return _this.driver.isElementPresent(_selector);
      };
      this.driver.wait(_isPresent, 10000, "" + _selector + " not found");
      return this.driver.findElement(_selector);
    };

    Widget.prototype.isPresent = function() {
      return this.driver.isElementPresent(Driver.By.css(this.root));
    };

    Widget.prototype.findAll = function(selector) {
      return this.driver.findElements(Driver.By.css(this._selector(selector)));
    };

    Widget.prototype._selector = function(selector) {
      return this.root + (selector ? " " + selector : '');
    };

    Widget.prototype._map = function(collection, callback) {
      var results, _reduce;
      results = [];
      _reduce = function(p, f, i) {
        return p.then(function() {
          return callback(f, i).then(function(v) {
            return results.push(v);
          });
        });
      };
      return _.reduce(collection, _reduce, Driver.promise.fulfilled()).then(function() {
        return results;
      });
    };

    return Widget;

  })();
  this.Widget.Fields = (function(_super) {
    __extends(Fields, _super);

    function Fields() {
      _ref = Fields.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Fields.prototype.fillAll = function(values) {
      var _this = this;
      return this._map(this.fields, function(f) {
        return _this.fill(_this._name(f), values[f]);
      });
    };

    Fields.prototype.readAll = function() {
      var _readAll,
        _this = this;
      _readAll = function(f) {
        return _this.read(_this._name(f)).then(function(v) {
          return [f, v];
        });
      };
      return this._map(this.fields, _readAll).then(function(read) {
        return _.object(read);
      });
    };

    Fields.prototype._name = function(name) {
      return "[name='" + name + "']";
    };

    Fields.prototype._type = function(type) {
      return "[type='" + type + "']";
    };

    return Fields;

  })(this.Widget);
  this.Widget.Form = (function(_super) {
    __extends(Form, _super);

    function Form() {
      this.submitWith = __bind(this.submitWith, this);
      _ref1 = Form.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Form.prototype.submitSelector = function() {
      return this._type('submit');
    };

    Form.prototype.submitWith = function(values) {
      this.fillAll(values);
      return this.click(this.submitSelector());
    };

    return Form;

  })(this.Widget.Fields);
  return this.Widget.List = (function(_super) {
    __extends(List, _super);

    function List() {
      _ref2 = List.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    List.prototype.itemSelector = 'li';

    List.prototype.itemClass = World.Widget;

    List.prototype.items = function() {
      var _this = this;
      return this.findAll(this.itemSelector).then(function(items) {
        return _.map(items, function(item, i) {
          var sel;
          sel = "" + _this.root + " " + _this.itemSelector + ":nth-child(" + (i + 1) + ")";
          return new _this.itemClass({
            root: sel
          });
        });
      });
    };

    return List;

  })(this.Widget);
};
